{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","state","text","handleText","e","_this","setState","target","value","handleClick","length","props","add","alert","react_default","a","createElement","className","type","placeholder","this","onChange","onClick","Component","Task","_props$task","task","id","active","change","class","delete","TaskList","tasks","filter","done","activeTasks","map","src_components_Task","key","doneTasks","Fragment","App","counter","handleChange","Object","toConsumableArray","forEach","handleDelete","index","findIndex","splice","addTask","prevState","concat","src_components_AddTask","src_components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c458e5d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddTask.css';\r\n\r\nclass AddTask extends Component {\r\n    state = { \r\n        text: '',\r\n     }\r\n\r\n     handleText = e => {\r\n         this.setState({\r\n             text: e.target.value\r\n         })\r\n     }\r\n\r\n     handleClick = () => {\r\n         const { text } = this.state\r\n         if(text.length > 0) {\r\n             const add = this.props.add(text) // moment dodania nowego zadania\r\n             if(add === true) {   \r\n                 this.setState({\r\n                     text: ''\r\n                 })\r\n             }\r\n         } else {\r\n            alert('Wpisz coś!')\r\n         }\r\n     }\r\n\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"add\">\r\n                <input type=\"text\" placeholder=\"Wpisz treść zadania\" value={this.state.text} onChange={this.handleText}/>\r\n                <button className=\"btnAdd\" onClick={this.handleClick}>Dodaj</button>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default AddTask;","import React from 'react';\r\nimport './Task.css';\r\n\r\nconst Task = (props) => {\r\n\r\n    const { id, text, active } = props.task // props.task - cała tablica właściwości przekazana przez props do Task\r\n\r\n    if(active) {\r\n    return ( \r\n        <div className=\"list\">\r\n            <span>{text}</span>\r\n            <div className=\"btns\">\r\n                <button onClick={() => props.change(id)}><i class=\"fas fa-check check\"></i></button>\r\n                <button onClick={() => props.delete(id)}><i class=\"fas fa-trash delete\"></i></button>\r\n            </div>\r\n        </div>\r\n     )\r\n    } else {\r\n        return (\r\n            <div className=\"list\">\r\n                <span>{text}</span>\r\n                <button className=\"btnDel\" onClick={() => props.delete(id)}><i class=\"fas fa-trash delete\"></i></button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n \r\nexport default Task;\r\n","import React from 'react';\r\nimport Task from './Task';\r\nimport './TaskList.css';\r\n\r\nconst TaskList = (props) => {\r\n\r\n    const active = props.tasks.filter(task => task.active); // task.active === true\r\n    const done = props.tasks.filter(task => !task.active); // task.active === false\r\n    \r\n\r\n    const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change}/>)\r\n    const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete}/>)\r\n\r\n    return ( \r\n        <>\r\n            <div className=\"active\">\r\n                <h1>Zadania do wykonania <em>({active.length})</em></h1>\r\n                {activeTasks.length > 0 ? activeTasks : <p>Brak zadań na liście</p>}\r\n            </div>\r\n\r\n            <div className=\"done\">\r\n                <h3>Zadania wykonane <em>({done.length})</em></h3>\r\n                {doneTasks}\r\n            </div>\r\n        </>    \r\n     );\r\n}\r\n \r\nexport default TaskList;","import React, { Component } from 'react';\nimport './App.css';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList';\n\nclass App extends Component {\n\ncounter = 0;\n\n  state = {\n    tasks: [\n      // {\n      //   id: 0,\n      //   text: 'Zrobić zakupy',\n      //   active: true\n      // },\n      // {\n      //   id: 1,\n      //   text: 'Ugotować obiad',\n      //   active: false\n      // }\n    ]\n  }\n\n  handleChange = (id) => {\n    // console.log('wykonano zadanie ' + id);\n    \n    let tasks = [...this.state.tasks]\n    tasks.forEach(task => {\n      if(task.id === id) {\n        task.active = false\n      }\n    })\n    this.setState({\n      tasks\n    })\n  }\n\n  handleDelete = (id) => {\n    // console.log('usunięto zadanie ' + id);\n\n    const tasks = [...this.state.tasks]\n    const index = tasks.findIndex(task => task.id === id)\n    tasks.splice(index, 1)\n    this.setState({\n      tasks\n    })\n  }\n\n\n  addTask = text => {\n    const task = {\n      id: this.counter,\n      text: text,\n      active: true\n    }\n    this.counter++\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task] \n    }))\n\n    return true\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"appTitle\">TODO APP</h1>\n        <div className=\"taskAdd\">\n          <AddTask add={this.addTask}/>\n        </div>\n        <div className=\"taskList\">\n          <TaskList tasks={this.state.tasks} delete={this.handleDelete} change={this.handleChange}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}